// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	v1beta1 "github.com/Dynatrace/dynatrace-operator/src/api/v1beta1"
	mock "github.com/stretchr/testify/mock"
)

// validator is an autogenerated mock type for the validator type
type validator struct {
	mock.Mock
}

type validator_Expecter struct {
	mock *mock.Mock
}

func (_m *validator) EXPECT() *validator_Expecter {
	return &validator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: dv, dynakube
func (_m *validator) Execute(dv *validation.dynakubeValidator, dynakube *v1beta1.DynaKube) string {
	ret := _m.Called(dv, dynakube)

	var r0 string
	if rf, ok := ret.Get(0).(func(*validation.dynakubeValidator, *v1beta1.DynaKube) string); ok {
		r0 = rf(dv, dynakube)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// validator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type validator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - dv *validation.dynakubeValidator
//   - dynakube *v1beta1.DynaKube
func (_e *validator_Expecter) Execute(dv interface{}, dynakube interface{}) *validator_Execute_Call {
	return &validator_Execute_Call{Call: _e.mock.On("Execute", dv, dynakube)}
}

func (_c *validator_Execute_Call) Run(run func(dv *validation.dynakubeValidator, dynakube *v1beta1.DynaKube)) *validator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*validation.dynakubeValidator), args[1].(*v1beta1.DynaKube))
	})
	return _c
}

func (_c *validator_Execute_Call) Return(_a0 string) *validator_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTnewValidator interface {
	mock.TestingT
	Cleanup(func())
}

// newValidator creates a new instance of validator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newValidator(t mockConstructorTestingTnewValidator) *validator {
	mock := &validator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
