// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	v1beta1 "github.com/Dynatrace/dynatrace-operator/src/api/v1beta1"
	mock "github.com/stretchr/testify/mock"
)

// VersionStatusNamer is an autogenerated mock type for the VersionStatusNamer type
type VersionStatusNamer struct {
	mock.Mock
}

type VersionStatusNamer_Expecter struct {
	mock *mock.Mock
}

func (_m *VersionStatusNamer) EXPECT() *VersionStatusNamer_Expecter {
	return &VersionStatusNamer_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *VersionStatusNamer) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// VersionStatusNamer_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type VersionStatusNamer_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *VersionStatusNamer_Expecter) Name() *VersionStatusNamer_Name_Call {
	return &VersionStatusNamer_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *VersionStatusNamer_Name_Call) Run(run func()) *VersionStatusNamer_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VersionStatusNamer_Name_Call) Return(_a0 string) *VersionStatusNamer_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

// Status provides a mock function with given fields:
func (_m *VersionStatusNamer) Status() v1beta1.VersionStatus {
	ret := _m.Called()

	var r0 v1beta1.VersionStatus
	if rf, ok := ret.Get(0).(func() v1beta1.VersionStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1beta1.VersionStatus)
	}

	return r0
}

// VersionStatusNamer_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type VersionStatusNamer_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *VersionStatusNamer_Expecter) Status() *VersionStatusNamer_Status_Call {
	return &VersionStatusNamer_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *VersionStatusNamer_Status_Call) Run(run func()) *VersionStatusNamer_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VersionStatusNamer_Status_Call) Return(_a0 v1beta1.VersionStatus) *VersionStatusNamer_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewVersionStatusNamer interface {
	mock.TestingT
	Cleanup(func())
}

// NewVersionStatusNamer creates a new instance of VersionStatusNamer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVersionStatusNamer(t mockConstructorTestingTNewVersionStatusNamer) *VersionStatusNamer {
	mock := &VersionStatusNamer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
