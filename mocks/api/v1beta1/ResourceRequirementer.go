// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// ResourceRequirementer is an autogenerated mock type for the ResourceRequirementer type
type ResourceRequirementer struct {
	mock.Mock
}

type ResourceRequirementer_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceRequirementer) EXPECT() *ResourceRequirementer_Expecter {
	return &ResourceRequirementer_Expecter{mock: &_m.Mock}
}

// Limits provides a mock function with given fields: _a0
func (_m *ResourceRequirementer) Limits(_a0 v1.ResourceName) *resource.Quantity {
	ret := _m.Called(_a0)

	var r0 *resource.Quantity
	if rf, ok := ret.Get(0).(func(v1.ResourceName) *resource.Quantity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resource.Quantity)
		}
	}

	return r0
}

// ResourceRequirementer_Limits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Limits'
type ResourceRequirementer_Limits_Call struct {
	*mock.Call
}

// Limits is a helper method to define mock.On call
//   - _a0 v1.ResourceName
func (_e *ResourceRequirementer_Expecter) Limits(_a0 interface{}) *ResourceRequirementer_Limits_Call {
	return &ResourceRequirementer_Limits_Call{Call: _e.mock.On("Limits", _a0)}
}

func (_c *ResourceRequirementer_Limits_Call) Run(run func(_a0 v1.ResourceName)) *ResourceRequirementer_Limits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1.ResourceName))
	})
	return _c
}

func (_c *ResourceRequirementer_Limits_Call) Return(_a0 *resource.Quantity) *ResourceRequirementer_Limits_Call {
	_c.Call.Return(_a0)
	return _c
}

// Requests provides a mock function with given fields: _a0
func (_m *ResourceRequirementer) Requests(_a0 v1.ResourceName) *resource.Quantity {
	ret := _m.Called(_a0)

	var r0 *resource.Quantity
	if rf, ok := ret.Get(0).(func(v1.ResourceName) *resource.Quantity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resource.Quantity)
		}
	}

	return r0
}

// ResourceRequirementer_Requests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Requests'
type ResourceRequirementer_Requests_Call struct {
	*mock.Call
}

// Requests is a helper method to define mock.On call
//   - _a0 v1.ResourceName
func (_e *ResourceRequirementer_Expecter) Requests(_a0 interface{}) *ResourceRequirementer_Requests_Call {
	return &ResourceRequirementer_Requests_Call{Call: _e.mock.On("Requests", _a0)}
}

func (_c *ResourceRequirementer_Requests_Call) Run(run func(_a0 v1.ResourceName)) *ResourceRequirementer_Requests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1.ResourceName))
	})
	return _c
}

func (_c *ResourceRequirementer_Requests_Call) Return(_a0 *resource.Quantity) *ResourceRequirementer_Requests_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewResourceRequirementer interface {
	mock.TestingT
	Cleanup(func())
}

// NewResourceRequirementer creates a new instance of ResourceRequirementer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResourceRequirementer(t mockConstructorTestingTNewResourceRequirementer) *ResourceRequirementer {
	mock := &ResourceRequirementer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
