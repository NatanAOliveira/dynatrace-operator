// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	dtclient "github.com/Dynatrace/dynatrace-operator/src/dtclient"
	mock "github.com/stretchr/testify/mock"
)

// Installer is an autogenerated mock type for the Installer type
type Installer struct {
	mock.Mock
}

type Installer_Expecter struct {
	mock *mock.Mock
}

func (_m *Installer) EXPECT() *Installer_Expecter {
	return &Installer_Expecter{mock: &_m.Mock}
}

// InstallAgent provides a mock function with given fields: targetDir
func (_m *Installer) InstallAgent(targetDir string) (bool, error) {
	ret := _m.Called(targetDir)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(targetDir)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(targetDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Installer_InstallAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallAgent'
type Installer_InstallAgent_Call struct {
	*mock.Call
}

// InstallAgent is a helper method to define mock.On call
//   - targetDir string
func (_e *Installer_Expecter) InstallAgent(targetDir interface{}) *Installer_InstallAgent_Call {
	return &Installer_InstallAgent_Call{Call: _e.mock.On("InstallAgent", targetDir)}
}

func (_c *Installer_InstallAgent_Call) Run(run func(targetDir string)) *Installer_InstallAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Installer_InstallAgent_Call) Return(_a0 bool, _a1 error) *Installer_InstallAgent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateProcessModuleConfig provides a mock function with given fields: targetDir, processModuleConfig
func (_m *Installer) UpdateProcessModuleConfig(targetDir string, processModuleConfig *dtclient.ProcessModuleConfig) error {
	ret := _m.Called(targetDir, processModuleConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *dtclient.ProcessModuleConfig) error); ok {
		r0 = rf(targetDir, processModuleConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Installer_UpdateProcessModuleConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProcessModuleConfig'
type Installer_UpdateProcessModuleConfig_Call struct {
	*mock.Call
}

// UpdateProcessModuleConfig is a helper method to define mock.On call
//   - targetDir string
//   - processModuleConfig *dtclient.ProcessModuleConfig
func (_e *Installer_Expecter) UpdateProcessModuleConfig(targetDir interface{}, processModuleConfig interface{}) *Installer_UpdateProcessModuleConfig_Call {
	return &Installer_UpdateProcessModuleConfig_Call{Call: _e.mock.On("UpdateProcessModuleConfig", targetDir, processModuleConfig)}
}

func (_c *Installer_UpdateProcessModuleConfig_Call) Run(run func(targetDir string, processModuleConfig *dtclient.ProcessModuleConfig)) *Installer_UpdateProcessModuleConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*dtclient.ProcessModuleConfig))
	})
	return _c
}

func (_c *Installer_UpdateProcessModuleConfig_Call) Return(_a0 error) *Installer_UpdateProcessModuleConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewInstaller interface {
	mock.TestingT
	Cleanup(func())
}

// NewInstaller creates a new instance of Installer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInstaller(t mockConstructorTestingTNewInstaller) *Installer {
	mock := &Installer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
