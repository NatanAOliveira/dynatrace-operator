// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	afero "github.com/spf13/afero"
	mock "github.com/stretchr/testify/mock"
)

// Extractor is an autogenerated mock type for the Extractor type
type Extractor struct {
	mock.Mock
}

type Extractor_Expecter struct {
	mock *mock.Mock
}

func (_m *Extractor) EXPECT() *Extractor_Expecter {
	return &Extractor_Expecter{mock: &_m.Mock}
}

// ExtractGzip provides a mock function with given fields: sourceFilePath, targetDir
func (_m *Extractor) ExtractGzip(sourceFilePath string, targetDir string) error {
	ret := _m.Called(sourceFilePath, targetDir)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(sourceFilePath, targetDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Extractor_ExtractGzip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractGzip'
type Extractor_ExtractGzip_Call struct {
	*mock.Call
}

// ExtractGzip is a helper method to define mock.On call
//   - sourceFilePath string
//   - targetDir string
func (_e *Extractor_Expecter) ExtractGzip(sourceFilePath interface{}, targetDir interface{}) *Extractor_ExtractGzip_Call {
	return &Extractor_ExtractGzip_Call{Call: _e.mock.On("ExtractGzip", sourceFilePath, targetDir)}
}

func (_c *Extractor_ExtractGzip_Call) Run(run func(sourceFilePath string, targetDir string)) *Extractor_ExtractGzip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Extractor_ExtractGzip_Call) Return(_a0 error) *Extractor_ExtractGzip_Call {
	_c.Call.Return(_a0)
	return _c
}

// ExtractZip provides a mock function with given fields: sourceFile, targetDir
func (_m *Extractor) ExtractZip(sourceFile afero.File, targetDir string) error {
	ret := _m.Called(sourceFile, targetDir)

	var r0 error
	if rf, ok := ret.Get(0).(func(afero.File, string) error); ok {
		r0 = rf(sourceFile, targetDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Extractor_ExtractZip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractZip'
type Extractor_ExtractZip_Call struct {
	*mock.Call
}

// ExtractZip is a helper method to define mock.On call
//   - sourceFile afero.File
//   - targetDir string
func (_e *Extractor_Expecter) ExtractZip(sourceFile interface{}, targetDir interface{}) *Extractor_ExtractZip_Call {
	return &Extractor_ExtractZip_Call{Call: _e.mock.On("ExtractZip", sourceFile, targetDir)}
}

func (_c *Extractor_ExtractZip_Call) Run(run func(sourceFile afero.File, targetDir string)) *Extractor_ExtractZip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(afero.File), args[1].(string))
	})
	return _c
}

func (_c *Extractor_ExtractZip_Call) Return(_a0 error) *Extractor_ExtractZip_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewExtractor interface {
	mock.TestingT
	Cleanup(func())
}

// NewExtractor creates a new instance of Extractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExtractor(t mockConstructorTestingTNewExtractor) *Extractor {
	mock := &Extractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
