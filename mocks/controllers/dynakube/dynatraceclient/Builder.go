// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	v1beta1 "github.com/Dynatrace/dynatrace-operator/src/api/v1beta1"
	dynatraceclient "github.com/Dynatrace/dynatrace-operator/src/controllers/dynakube/dynatraceclient"
	token "github.com/Dynatrace/dynatrace-operator/src/controllers/dynakube/token"
	dtclient "github.com/Dynatrace/dynatrace-operator/src/dtclient"
	mock "github.com/stretchr/testify/mock"
)

// Builder is an autogenerated mock type for the Builder type
type Builder struct {
	mock.Mock
}

type Builder_Expecter struct {
	mock *mock.Mock
}

func (_m *Builder) EXPECT() *Builder_Expecter {
	return &Builder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields:
func (_m *Builder) Build() (dtclient.Client, error) {
	ret := _m.Called()

	var r0 dtclient.Client
	if rf, ok := ret.Get(0).(func() dtclient.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dtclient.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type Builder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *Builder_Expecter) Build() *Builder_Build_Call {
	return &Builder_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *Builder_Build_Call) Run(run func()) *Builder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Builder_Build_Call) Return(_a0 dtclient.Client, _a1 error) *Builder_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// BuildWithTokenVerification provides a mock function with given fields: dynaKubeStatus
func (_m *Builder) BuildWithTokenVerification(dynaKubeStatus *v1beta1.DynaKubeStatus) (dtclient.Client, error) {
	ret := _m.Called(dynaKubeStatus)

	var r0 dtclient.Client
	if rf, ok := ret.Get(0).(func(*v1beta1.DynaKubeStatus) dtclient.Client); ok {
		r0 = rf(dynaKubeStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dtclient.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1beta1.DynaKubeStatus) error); ok {
		r1 = rf(dynaKubeStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_BuildWithTokenVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildWithTokenVerification'
type Builder_BuildWithTokenVerification_Call struct {
	*mock.Call
}

// BuildWithTokenVerification is a helper method to define mock.On call
//   - dynaKubeStatus *v1beta1.DynaKubeStatus
func (_e *Builder_Expecter) BuildWithTokenVerification(dynaKubeStatus interface{}) *Builder_BuildWithTokenVerification_Call {
	return &Builder_BuildWithTokenVerification_Call{Call: _e.mock.On("BuildWithTokenVerification", dynaKubeStatus)}
}

func (_c *Builder_BuildWithTokenVerification_Call) Run(run func(dynaKubeStatus *v1beta1.DynaKubeStatus)) *Builder_BuildWithTokenVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1beta1.DynaKubeStatus))
	})
	return _c
}

func (_c *Builder_BuildWithTokenVerification_Call) Return(_a0 dtclient.Client, _a1 error) *Builder_BuildWithTokenVerification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetContext provides a mock function with given fields: ctx
func (_m *Builder) SetContext(ctx context.Context) dynatraceclient.Builder {
	ret := _m.Called(ctx)

	var r0 dynatraceclient.Builder
	if rf, ok := ret.Get(0).(func(context.Context) dynatraceclient.Builder); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynatraceclient.Builder)
		}
	}

	return r0
}

// Builder_SetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetContext'
type Builder_SetContext_Call struct {
	*mock.Call
}

// SetContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Builder_Expecter) SetContext(ctx interface{}) *Builder_SetContext_Call {
	return &Builder_SetContext_Call{Call: _e.mock.On("SetContext", ctx)}
}

func (_c *Builder_SetContext_Call) Run(run func(ctx context.Context)) *Builder_SetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Builder_SetContext_Call) Return(_a0 dynatraceclient.Builder) *Builder_SetContext_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetDynakube provides a mock function with given fields: dynakube
func (_m *Builder) SetDynakube(dynakube v1beta1.DynaKube) dynatraceclient.Builder {
	ret := _m.Called(dynakube)

	var r0 dynatraceclient.Builder
	if rf, ok := ret.Get(0).(func(v1beta1.DynaKube) dynatraceclient.Builder); ok {
		r0 = rf(dynakube)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynatraceclient.Builder)
		}
	}

	return r0
}

// Builder_SetDynakube_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDynakube'
type Builder_SetDynakube_Call struct {
	*mock.Call
}

// SetDynakube is a helper method to define mock.On call
//   - dynakube v1beta1.DynaKube
func (_e *Builder_Expecter) SetDynakube(dynakube interface{}) *Builder_SetDynakube_Call {
	return &Builder_SetDynakube_Call{Call: _e.mock.On("SetDynakube", dynakube)}
}

func (_c *Builder_SetDynakube_Call) Run(run func(dynakube v1beta1.DynaKube)) *Builder_SetDynakube_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1beta1.DynaKube))
	})
	return _c
}

func (_c *Builder_SetDynakube_Call) Return(_a0 dynatraceclient.Builder) *Builder_SetDynakube_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetTokens provides a mock function with given fields: tokens
func (_m *Builder) SetTokens(tokens token.Tokens) dynatraceclient.Builder {
	ret := _m.Called(tokens)

	var r0 dynatraceclient.Builder
	if rf, ok := ret.Get(0).(func(token.Tokens) dynatraceclient.Builder); ok {
		r0 = rf(tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynatraceclient.Builder)
		}
	}

	return r0
}

// Builder_SetTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTokens'
type Builder_SetTokens_Call struct {
	*mock.Call
}

// SetTokens is a helper method to define mock.On call
//   - tokens token.Tokens
func (_e *Builder_Expecter) SetTokens(tokens interface{}) *Builder_SetTokens_Call {
	return &Builder_SetTokens_Call{Call: _e.mock.On("SetTokens", tokens)}
}

func (_c *Builder_SetTokens_Call) Run(run func(tokens token.Tokens)) *Builder_SetTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(token.Tokens))
	})
	return _c
}

func (_c *Builder_SetTokens_Call) Return(_a0 dynatraceclient.Builder) *Builder_SetTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBuilder(t mockConstructorTestingTNewBuilder) *Builder {
	mock := &Builder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
