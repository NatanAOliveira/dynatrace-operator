// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	version "github.com/Dynatrace/dynatrace-operator/src/controllers/dynakube/version"
	dockerconfig "github.com/Dynatrace/dynatrace-operator/src/dockerconfig"
	mock "github.com/stretchr/testify/mock"
)

// VersionProviderCallback is an autogenerated mock type for the VersionProviderCallback type
type VersionProviderCallback struct {
	mock.Mock
}

type VersionProviderCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *VersionProviderCallback) EXPECT() *VersionProviderCallback_Expecter {
	return &VersionProviderCallback_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *VersionProviderCallback) Execute(_a0 string, _a1 *dockerconfig.DockerConfig) (version.ImageVersion, error) {
	ret := _m.Called(_a0, _a1)

	var r0 version.ImageVersion
	if rf, ok := ret.Get(0).(func(string, *dockerconfig.DockerConfig) version.ImageVersion); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(version.ImageVersion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *dockerconfig.DockerConfig) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionProviderCallback_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type VersionProviderCallback_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 string
//   - _a1 *dockerconfig.DockerConfig
func (_e *VersionProviderCallback_Expecter) Execute(_a0 interface{}, _a1 interface{}) *VersionProviderCallback_Execute_Call {
	return &VersionProviderCallback_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *VersionProviderCallback_Execute_Call) Run(run func(_a0 string, _a1 *dockerconfig.DockerConfig)) *VersionProviderCallback_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*dockerconfig.DockerConfig))
	})
	return _c
}

func (_c *VersionProviderCallback_Execute_Call) Return(_a0 version.ImageVersion, _a1 error) *VersionProviderCallback_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewVersionProviderCallback interface {
	mock.TestingT
	Cleanup(func())
}

// NewVersionProviderCallback creates a new instance of VersionProviderCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVersionProviderCallback(t mockConstructorTestingTNewVersionProviderCallback) *VersionProviderCallback {
	mock := &VersionProviderCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
