// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	version "github.com/Dynatrace/dynatrace-operator/src/controllers/dynakube/version"
	dockerconfig "github.com/Dynatrace/dynatrace-operator/src/dockerconfig"
	mock "github.com/stretchr/testify/mock"
)

// ImageVersionProvider is an autogenerated mock type for the ImageVersionProvider type
type ImageVersionProvider struct {
	mock.Mock
}

type ImageVersionProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ImageVersionProvider) EXPECT() *ImageVersionProvider_Expecter {
	return &ImageVersionProvider_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: img, dockerConfig
func (_m *ImageVersionProvider) Execute(img string, dockerConfig *dockerconfig.DockerConfig) (version.ImageVersion, error) {
	ret := _m.Called(img, dockerConfig)

	var r0 version.ImageVersion
	if rf, ok := ret.Get(0).(func(string, *dockerconfig.DockerConfig) version.ImageVersion); ok {
		r0 = rf(img, dockerConfig)
	} else {
		r0 = ret.Get(0).(version.ImageVersion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *dockerconfig.DockerConfig) error); ok {
		r1 = rf(img, dockerConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageVersionProvider_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ImageVersionProvider_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - img string
//   - dockerConfig *dockerconfig.DockerConfig
func (_e *ImageVersionProvider_Expecter) Execute(img interface{}, dockerConfig interface{}) *ImageVersionProvider_Execute_Call {
	return &ImageVersionProvider_Execute_Call{Call: _e.mock.On("Execute", img, dockerConfig)}
}

func (_c *ImageVersionProvider_Execute_Call) Run(run func(img string, dockerConfig *dockerconfig.DockerConfig)) *ImageVersionProvider_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*dockerconfig.DockerConfig))
	})
	return _c
}

func (_c *ImageVersionProvider_Execute_Call) Return(_a0 version.ImageVersion, _a1 error) *ImageVersionProvider_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewImageVersionProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewImageVersionProvider creates a new instance of ImageVersionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImageVersionProvider(t mockConstructorTestingTNewImageVersionProvider) *ImageVersionProvider {
	mock := &ImageVersionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
