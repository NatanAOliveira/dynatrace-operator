// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// initContainerModifier is an autogenerated mock type for the initContainerModifier type
type initContainerModifier struct {
	mock.Mock
}

type initContainerModifier_Expecter struct {
	mock *mock.Mock
}

func (_m *initContainerModifier) EXPECT() *initContainerModifier_Expecter {
	return &initContainerModifier_Expecter{mock: &_m.Mock}
}

// getInitContainers provides a mock function with given fields:
func (_m *initContainerModifier) getInitContainers() []v1.Container {
	ret := _m.Called()

	var r0 []v1.Container
	if rf, ok := ret.Get(0).(func() []v1.Container); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Container)
		}
	}

	return r0
}

// initContainerModifier_getInitContainers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getInitContainers'
type initContainerModifier_getInitContainers_Call struct {
	*mock.Call
}

// getInitContainers is a helper method to define mock.On call
func (_e *initContainerModifier_Expecter) getInitContainers() *initContainerModifier_getInitContainers_Call {
	return &initContainerModifier_getInitContainers_Call{Call: _e.mock.On("getInitContainers")}
}

func (_c *initContainerModifier_getInitContainers_Call) Run(run func()) *initContainerModifier_getInitContainers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *initContainerModifier_getInitContainers_Call) Return(_a0 []v1.Container) *initContainerModifier_getInitContainers_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTnewInitContainerModifier interface {
	mock.TestingT
	Cleanup(func())
}

// newInitContainerModifier creates a new instance of initContainerModifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newInitContainerModifier(t mockConstructorTestingTnewInitContainerModifier) *initContainerModifier {
	mock := &initContainerModifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
