// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	v1beta1 "github.com/Dynatrace/dynatrace-operator/src/api/v1beta1"
	mock "github.com/stretchr/testify/mock"
)

// Capability is an autogenerated mock type for the Capability type
type Capability struct {
	mock.Mock
}

type Capability_Expecter struct {
	mock *mock.Mock
}

func (_m *Capability) EXPECT() *Capability_Expecter {
	return &Capability_Expecter{mock: &_m.Mock}
}

// ArgName provides a mock function with given fields:
func (_m *Capability) ArgName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Capability_ArgName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArgName'
type Capability_ArgName_Call struct {
	*mock.Call
}

// ArgName is a helper method to define mock.On call
func (_e *Capability_Expecter) ArgName() *Capability_ArgName_Call {
	return &Capability_ArgName_Call{Call: _e.mock.On("ArgName")}
}

func (_c *Capability_ArgName_Call) Run(run func()) *Capability_ArgName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capability_ArgName_Call) Return(_a0 string) *Capability_ArgName_Call {
	_c.Call.Return(_a0)
	return _c
}

// Enabled provides a mock function with given fields:
func (_m *Capability) Enabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Capability_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type Capability_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *Capability_Expecter) Enabled() *Capability_Enabled_Call {
	return &Capability_Enabled_Call{Call: _e.mock.On("Enabled")}
}

func (_c *Capability_Enabled_Call) Run(run func()) *Capability_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capability_Enabled_Call) Return(_a0 bool) *Capability_Enabled_Call {
	_c.Call.Return(_a0)
	return _c
}

// Properties provides a mock function with given fields:
func (_m *Capability) Properties() *v1beta1.CapabilityProperties {
	ret := _m.Called()

	var r0 *v1beta1.CapabilityProperties
	if rf, ok := ret.Get(0).(func() *v1beta1.CapabilityProperties); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.CapabilityProperties)
		}
	}

	return r0
}

// Capability_Properties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Properties'
type Capability_Properties_Call struct {
	*mock.Call
}

// Properties is a helper method to define mock.On call
func (_e *Capability_Expecter) Properties() *Capability_Properties_Call {
	return &Capability_Properties_Call{Call: _e.mock.On("Properties")}
}

func (_c *Capability_Properties_Call) Run(run func()) *Capability_Properties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capability_Properties_Call) Return(_a0 *v1beta1.CapabilityProperties) *Capability_Properties_Call {
	_c.Call.Return(_a0)
	return _c
}

// ShortName provides a mock function with given fields:
func (_m *Capability) ShortName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Capability_ShortName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShortName'
type Capability_ShortName_Call struct {
	*mock.Call
}

// ShortName is a helper method to define mock.On call
func (_e *Capability_Expecter) ShortName() *Capability_ShortName_Call {
	return &Capability_ShortName_Call{Call: _e.mock.On("ShortName")}
}

func (_c *Capability_ShortName_Call) Run(run func()) *Capability_ShortName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capability_ShortName_Call) Return(_a0 string) *Capability_ShortName_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCapability interface {
	mock.TestingT
	Cleanup(func())
}

// NewCapability creates a new instance of Capability. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCapability(t mockConstructorTestingTNewCapability) *Capability {
	mock := &Capability{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
