// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// baseFunc is an autogenerated mock type for the baseFunc type
type baseFunc struct {
	mock.Mock
}

type baseFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *baseFunc) EXPECT() *baseFunc_Expecter {
	return &baseFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *baseFunc) Execute() *capability.capabilityBase {
	ret := _m.Called()

	var r0 *capability.capabilityBase
	if rf, ok := ret.Get(0).(func() *capability.capabilityBase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*capability.capabilityBase)
		}
	}

	return r0
}

// baseFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type baseFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *baseFunc_Expecter) Execute() *baseFunc_Execute_Call {
	return &baseFunc_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *baseFunc_Execute_Call) Run(run func()) *baseFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *baseFunc_Execute_Call) Return(_a0 *capability.capabilityBase) *baseFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTnewBaseFunc interface {
	mock.TestingT
	Cleanup(func())
}

// newBaseFunc creates a new instance of baseFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newBaseFunc(t mockConstructorTestingTnewBaseFunc) *baseFunc {
	mock := &baseFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
