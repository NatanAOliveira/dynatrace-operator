// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/apps/v1"
)

// Builder is an autogenerated mock type for the Builder type
type Builder struct {
	mock.Mock
}

type Builder_Expecter struct {
	mock *mock.Mock
}

func (_m *Builder) EXPECT() *Builder_Expecter {
	return &Builder_Expecter{mock: &_m.Mock}
}

// BuildDaemonSet provides a mock function with given fields:
func (_m *Builder) BuildDaemonSet() (*v1.DaemonSet, error) {
	ret := _m.Called()

	var r0 *v1.DaemonSet
	if rf, ok := ret.Get(0).(func() *v1.DaemonSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DaemonSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_BuildDaemonSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildDaemonSet'
type Builder_BuildDaemonSet_Call struct {
	*mock.Call
}

// BuildDaemonSet is a helper method to define mock.On call
func (_e *Builder_Expecter) BuildDaemonSet() *Builder_BuildDaemonSet_Call {
	return &Builder_BuildDaemonSet_Call{Call: _e.mock.On("BuildDaemonSet")}
}

func (_c *Builder_BuildDaemonSet_Call) Run(run func()) *Builder_BuildDaemonSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Builder_BuildDaemonSet_Call) Return(_a0 *v1.DaemonSet, _a1 error) *Builder_BuildDaemonSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBuilder(t mockConstructorTestingTNewBuilder) *Builder {
	mock := &Builder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
