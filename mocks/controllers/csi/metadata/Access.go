// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	metadata "github.com/Dynatrace/dynatrace-operator/src/controllers/csi/metadata"
	mock "github.com/stretchr/testify/mock"
)

// Access is an autogenerated mock type for the Access type
type Access struct {
	mock.Mock
}

type Access_Expecter struct {
	mock *mock.Mock
}

func (_m *Access) EXPECT() *Access_Expecter {
	return &Access_Expecter{mock: &_m.Mock}
}

// DeleteDynakube provides a mock function with given fields: ctx, dynakubeName
func (_m *Access) DeleteDynakube(ctx context.Context, dynakubeName string) error {
	ret := _m.Called(ctx, dynakubeName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, dynakubeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Access_DeleteDynakube_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDynakube'
type Access_DeleteDynakube_Call struct {
	*mock.Call
}

// DeleteDynakube is a helper method to define mock.On call
//   - ctx context.Context
//   - dynakubeName string
func (_e *Access_Expecter) DeleteDynakube(ctx interface{}, dynakubeName interface{}) *Access_DeleteDynakube_Call {
	return &Access_DeleteDynakube_Call{Call: _e.mock.On("DeleteDynakube", ctx, dynakubeName)}
}

func (_c *Access_DeleteDynakube_Call) Run(run func(ctx context.Context, dynakubeName string)) *Access_DeleteDynakube_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Access_DeleteDynakube_Call) Return(_a0 error) *Access_DeleteDynakube_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteVolume provides a mock function with given fields: ctx, volumeID
func (_m *Access) DeleteVolume(ctx context.Context, volumeID string) error {
	ret := _m.Called(ctx, volumeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, volumeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Access_DeleteVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVolume'
type Access_DeleteVolume_Call struct {
	*mock.Call
}

// DeleteVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - volumeID string
func (_e *Access_Expecter) DeleteVolume(ctx interface{}, volumeID interface{}) *Access_DeleteVolume_Call {
	return &Access_DeleteVolume_Call{Call: _e.mock.On("DeleteVolume", ctx, volumeID)}
}

func (_c *Access_DeleteVolume_Call) Run(run func(ctx context.Context, volumeID string)) *Access_DeleteVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Access_DeleteVolume_Call) Return(_a0 error) *Access_DeleteVolume_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetAllDynakubes provides a mock function with given fields: ctx
func (_m *Access) GetAllDynakubes(ctx context.Context) ([]*metadata.Dynakube, error) {
	ret := _m.Called(ctx)

	var r0 []*metadata.Dynakube
	if rf, ok := ret.Get(0).(func(context.Context) []*metadata.Dynakube); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metadata.Dynakube)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetAllDynakubes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDynakubes'
type Access_GetAllDynakubes_Call struct {
	*mock.Call
}

// GetAllDynakubes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Access_Expecter) GetAllDynakubes(ctx interface{}) *Access_GetAllDynakubes_Call {
	return &Access_GetAllDynakubes_Call{Call: _e.mock.On("GetAllDynakubes", ctx)}
}

func (_c *Access_GetAllDynakubes_Call) Run(run func(ctx context.Context)) *Access_GetAllDynakubes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Access_GetAllDynakubes_Call) Return(_a0 []*metadata.Dynakube, _a1 error) *Access_GetAllDynakubes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllOsAgentVolumes provides a mock function with given fields: ctx
func (_m *Access) GetAllOsAgentVolumes(ctx context.Context) ([]*metadata.OsAgentVolume, error) {
	ret := _m.Called(ctx)

	var r0 []*metadata.OsAgentVolume
	if rf, ok := ret.Get(0).(func(context.Context) []*metadata.OsAgentVolume); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metadata.OsAgentVolume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetAllOsAgentVolumes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOsAgentVolumes'
type Access_GetAllOsAgentVolumes_Call struct {
	*mock.Call
}

// GetAllOsAgentVolumes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Access_Expecter) GetAllOsAgentVolumes(ctx interface{}) *Access_GetAllOsAgentVolumes_Call {
	return &Access_GetAllOsAgentVolumes_Call{Call: _e.mock.On("GetAllOsAgentVolumes", ctx)}
}

func (_c *Access_GetAllOsAgentVolumes_Call) Run(run func(ctx context.Context)) *Access_GetAllOsAgentVolumes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Access_GetAllOsAgentVolumes_Call) Return(_a0 []*metadata.OsAgentVolume, _a1 error) *Access_GetAllOsAgentVolumes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllUsedVersions provides a mock function with given fields: ctx
func (_m *Access) GetAllUsedVersions(ctx context.Context) (map[string]bool, error) {
	ret := _m.Called(ctx)

	var r0 map[string]bool
	if rf, ok := ret.Get(0).(func(context.Context) map[string]bool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetAllUsedVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsedVersions'
type Access_GetAllUsedVersions_Call struct {
	*mock.Call
}

// GetAllUsedVersions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Access_Expecter) GetAllUsedVersions(ctx interface{}) *Access_GetAllUsedVersions_Call {
	return &Access_GetAllUsedVersions_Call{Call: _e.mock.On("GetAllUsedVersions", ctx)}
}

func (_c *Access_GetAllUsedVersions_Call) Run(run func(ctx context.Context)) *Access_GetAllUsedVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Access_GetAllUsedVersions_Call) Return(_a0 map[string]bool, _a1 error) *Access_GetAllUsedVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllVolumes provides a mock function with given fields: ctx
func (_m *Access) GetAllVolumes(ctx context.Context) ([]*metadata.Volume, error) {
	ret := _m.Called(ctx)

	var r0 []*metadata.Volume
	if rf, ok := ret.Get(0).(func(context.Context) []*metadata.Volume); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metadata.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetAllVolumes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllVolumes'
type Access_GetAllVolumes_Call struct {
	*mock.Call
}

// GetAllVolumes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Access_Expecter) GetAllVolumes(ctx interface{}) *Access_GetAllVolumes_Call {
	return &Access_GetAllVolumes_Call{Call: _e.mock.On("GetAllVolumes", ctx)}
}

func (_c *Access_GetAllVolumes_Call) Run(run func(ctx context.Context)) *Access_GetAllVolumes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Access_GetAllVolumes_Call) Return(_a0 []*metadata.Volume, _a1 error) *Access_GetAllVolumes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDynakube provides a mock function with given fields: ctx, dynakubeName
func (_m *Access) GetDynakube(ctx context.Context, dynakubeName string) (*metadata.Dynakube, error) {
	ret := _m.Called(ctx, dynakubeName)

	var r0 *metadata.Dynakube
	if rf, ok := ret.Get(0).(func(context.Context, string) *metadata.Dynakube); ok {
		r0 = rf(ctx, dynakubeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.Dynakube)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dynakubeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetDynakube_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynakube'
type Access_GetDynakube_Call struct {
	*mock.Call
}

// GetDynakube is a helper method to define mock.On call
//   - ctx context.Context
//   - dynakubeName string
func (_e *Access_Expecter) GetDynakube(ctx interface{}, dynakubeName interface{}) *Access_GetDynakube_Call {
	return &Access_GetDynakube_Call{Call: _e.mock.On("GetDynakube", ctx, dynakubeName)}
}

func (_c *Access_GetDynakube_Call) Run(run func(ctx context.Context, dynakubeName string)) *Access_GetDynakube_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Access_GetDynakube_Call) Return(_a0 *metadata.Dynakube, _a1 error) *Access_GetDynakube_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOsAgentVolumeViaTenantUUID provides a mock function with given fields: ctx, volumeID
func (_m *Access) GetOsAgentVolumeViaTenantUUID(ctx context.Context, volumeID string) (*metadata.OsAgentVolume, error) {
	ret := _m.Called(ctx, volumeID)

	var r0 *metadata.OsAgentVolume
	if rf, ok := ret.Get(0).(func(context.Context, string) *metadata.OsAgentVolume); ok {
		r0 = rf(ctx, volumeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.OsAgentVolume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, volumeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetOsAgentVolumeViaTenantUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOsAgentVolumeViaTenantUUID'
type Access_GetOsAgentVolumeViaTenantUUID_Call struct {
	*mock.Call
}

// GetOsAgentVolumeViaTenantUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - volumeID string
func (_e *Access_Expecter) GetOsAgentVolumeViaTenantUUID(ctx interface{}, volumeID interface{}) *Access_GetOsAgentVolumeViaTenantUUID_Call {
	return &Access_GetOsAgentVolumeViaTenantUUID_Call{Call: _e.mock.On("GetOsAgentVolumeViaTenantUUID", ctx, volumeID)}
}

func (_c *Access_GetOsAgentVolumeViaTenantUUID_Call) Run(run func(ctx context.Context, volumeID string)) *Access_GetOsAgentVolumeViaTenantUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Access_GetOsAgentVolumeViaTenantUUID_Call) Return(_a0 *metadata.OsAgentVolume, _a1 error) *Access_GetOsAgentVolumeViaTenantUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOsAgentVolumeViaVolumeID provides a mock function with given fields: ctx, volumeID
func (_m *Access) GetOsAgentVolumeViaVolumeID(ctx context.Context, volumeID string) (*metadata.OsAgentVolume, error) {
	ret := _m.Called(ctx, volumeID)

	var r0 *metadata.OsAgentVolume
	if rf, ok := ret.Get(0).(func(context.Context, string) *metadata.OsAgentVolume); ok {
		r0 = rf(ctx, volumeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.OsAgentVolume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, volumeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetOsAgentVolumeViaVolumeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOsAgentVolumeViaVolumeID'
type Access_GetOsAgentVolumeViaVolumeID_Call struct {
	*mock.Call
}

// GetOsAgentVolumeViaVolumeID is a helper method to define mock.On call
//   - ctx context.Context
//   - volumeID string
func (_e *Access_Expecter) GetOsAgentVolumeViaVolumeID(ctx interface{}, volumeID interface{}) *Access_GetOsAgentVolumeViaVolumeID_Call {
	return &Access_GetOsAgentVolumeViaVolumeID_Call{Call: _e.mock.On("GetOsAgentVolumeViaVolumeID", ctx, volumeID)}
}

func (_c *Access_GetOsAgentVolumeViaVolumeID_Call) Run(run func(ctx context.Context, volumeID string)) *Access_GetOsAgentVolumeViaVolumeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Access_GetOsAgentVolumeViaVolumeID_Call) Return(_a0 *metadata.OsAgentVolume, _a1 error) *Access_GetOsAgentVolumeViaVolumeID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPodNames provides a mock function with given fields: ctx
func (_m *Access) GetPodNames(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetPodNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPodNames'
type Access_GetPodNames_Call struct {
	*mock.Call
}

// GetPodNames is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Access_Expecter) GetPodNames(ctx interface{}) *Access_GetPodNames_Call {
	return &Access_GetPodNames_Call{Call: _e.mock.On("GetPodNames", ctx)}
}

func (_c *Access_GetPodNames_Call) Run(run func(ctx context.Context)) *Access_GetPodNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Access_GetPodNames_Call) Return(_a0 map[string]string, _a1 error) *Access_GetPodNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantsToDynakubes provides a mock function with given fields: ctx
func (_m *Access) GetTenantsToDynakubes(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetTenantsToDynakubes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantsToDynakubes'
type Access_GetTenantsToDynakubes_Call struct {
	*mock.Call
}

// GetTenantsToDynakubes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Access_Expecter) GetTenantsToDynakubes(ctx interface{}) *Access_GetTenantsToDynakubes_Call {
	return &Access_GetTenantsToDynakubes_Call{Call: _e.mock.On("GetTenantsToDynakubes", ctx)}
}

func (_c *Access_GetTenantsToDynakubes_Call) Run(run func(ctx context.Context)) *Access_GetTenantsToDynakubes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Access_GetTenantsToDynakubes_Call) Return(_a0 map[string]string, _a1 error) *Access_GetTenantsToDynakubes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUsedImageDigests provides a mock function with given fields: ctx
func (_m *Access) GetUsedImageDigests(ctx context.Context) (map[string]bool, error) {
	ret := _m.Called(ctx)

	var r0 map[string]bool
	if rf, ok := ret.Get(0).(func(context.Context) map[string]bool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetUsedImageDigests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsedImageDigests'
type Access_GetUsedImageDigests_Call struct {
	*mock.Call
}

// GetUsedImageDigests is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Access_Expecter) GetUsedImageDigests(ctx interface{}) *Access_GetUsedImageDigests_Call {
	return &Access_GetUsedImageDigests_Call{Call: _e.mock.On("GetUsedImageDigests", ctx)}
}

func (_c *Access_GetUsedImageDigests_Call) Run(run func(ctx context.Context)) *Access_GetUsedImageDigests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Access_GetUsedImageDigests_Call) Return(_a0 map[string]bool, _a1 error) *Access_GetUsedImageDigests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUsedVersions provides a mock function with given fields: ctx, tenantUUID
func (_m *Access) GetUsedVersions(ctx context.Context, tenantUUID string) (map[string]bool, error) {
	ret := _m.Called(ctx, tenantUUID)

	var r0 map[string]bool
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]bool); ok {
		r0 = rf(ctx, tenantUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetUsedVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsedVersions'
type Access_GetUsedVersions_Call struct {
	*mock.Call
}

// GetUsedVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantUUID string
func (_e *Access_Expecter) GetUsedVersions(ctx interface{}, tenantUUID interface{}) *Access_GetUsedVersions_Call {
	return &Access_GetUsedVersions_Call{Call: _e.mock.On("GetUsedVersions", ctx, tenantUUID)}
}

func (_c *Access_GetUsedVersions_Call) Run(run func(ctx context.Context, tenantUUID string)) *Access_GetUsedVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Access_GetUsedVersions_Call) Return(_a0 map[string]bool, _a1 error) *Access_GetUsedVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetVolume provides a mock function with given fields: ctx, volumeID
func (_m *Access) GetVolume(ctx context.Context, volumeID string) (*metadata.Volume, error) {
	ret := _m.Called(ctx, volumeID)

	var r0 *metadata.Volume
	if rf, ok := ret.Get(0).(func(context.Context, string) *metadata.Volume); ok {
		r0 = rf(ctx, volumeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, volumeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_GetVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVolume'
type Access_GetVolume_Call struct {
	*mock.Call
}

// GetVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - volumeID string
func (_e *Access_Expecter) GetVolume(ctx interface{}, volumeID interface{}) *Access_GetVolume_Call {
	return &Access_GetVolume_Call{Call: _e.mock.On("GetVolume", ctx, volumeID)}
}

func (_c *Access_GetVolume_Call) Run(run func(ctx context.Context, volumeID string)) *Access_GetVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Access_GetVolume_Call) Return(_a0 *metadata.Volume, _a1 error) *Access_GetVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// InsertDynakube provides a mock function with given fields: ctx, dynakube
func (_m *Access) InsertDynakube(ctx context.Context, dynakube *metadata.Dynakube) error {
	ret := _m.Called(ctx, dynakube)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metadata.Dynakube) error); ok {
		r0 = rf(ctx, dynakube)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Access_InsertDynakube_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertDynakube'
type Access_InsertDynakube_Call struct {
	*mock.Call
}

// InsertDynakube is a helper method to define mock.On call
//   - ctx context.Context
//   - dynakube *metadata.Dynakube
func (_e *Access_Expecter) InsertDynakube(ctx interface{}, dynakube interface{}) *Access_InsertDynakube_Call {
	return &Access_InsertDynakube_Call{Call: _e.mock.On("InsertDynakube", ctx, dynakube)}
}

func (_c *Access_InsertDynakube_Call) Run(run func(ctx context.Context, dynakube *metadata.Dynakube)) *Access_InsertDynakube_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metadata.Dynakube))
	})
	return _c
}

func (_c *Access_InsertDynakube_Call) Return(_a0 error) *Access_InsertDynakube_Call {
	_c.Call.Return(_a0)
	return _c
}

// InsertOsAgentVolume provides a mock function with given fields: ctx, volume
func (_m *Access) InsertOsAgentVolume(ctx context.Context, volume *metadata.OsAgentVolume) error {
	ret := _m.Called(ctx, volume)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metadata.OsAgentVolume) error); ok {
		r0 = rf(ctx, volume)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Access_InsertOsAgentVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOsAgentVolume'
type Access_InsertOsAgentVolume_Call struct {
	*mock.Call
}

// InsertOsAgentVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - volume *metadata.OsAgentVolume
func (_e *Access_Expecter) InsertOsAgentVolume(ctx interface{}, volume interface{}) *Access_InsertOsAgentVolume_Call {
	return &Access_InsertOsAgentVolume_Call{Call: _e.mock.On("InsertOsAgentVolume", ctx, volume)}
}

func (_c *Access_InsertOsAgentVolume_Call) Run(run func(ctx context.Context, volume *metadata.OsAgentVolume)) *Access_InsertOsAgentVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metadata.OsAgentVolume))
	})
	return _c
}

func (_c *Access_InsertOsAgentVolume_Call) Return(_a0 error) *Access_InsertOsAgentVolume_Call {
	_c.Call.Return(_a0)
	return _c
}

// InsertVolume provides a mock function with given fields: ctx, volume
func (_m *Access) InsertVolume(ctx context.Context, volume *metadata.Volume) error {
	ret := _m.Called(ctx, volume)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metadata.Volume) error); ok {
		r0 = rf(ctx, volume)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Access_InsertVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertVolume'
type Access_InsertVolume_Call struct {
	*mock.Call
}

// InsertVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - volume *metadata.Volume
func (_e *Access_Expecter) InsertVolume(ctx interface{}, volume interface{}) *Access_InsertVolume_Call {
	return &Access_InsertVolume_Call{Call: _e.mock.On("InsertVolume", ctx, volume)}
}

func (_c *Access_InsertVolume_Call) Run(run func(ctx context.Context, volume *metadata.Volume)) *Access_InsertVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metadata.Volume))
	})
	return _c
}

func (_c *Access_InsertVolume_Call) Return(_a0 error) *Access_InsertVolume_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsImageDigestUsed provides a mock function with given fields: ctx, imageDigest
func (_m *Access) IsImageDigestUsed(ctx context.Context, imageDigest string) (bool, error) {
	ret := _m.Called(ctx, imageDigest)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, imageDigest)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, imageDigest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_IsImageDigestUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsImageDigestUsed'
type Access_IsImageDigestUsed_Call struct {
	*mock.Call
}

// IsImageDigestUsed is a helper method to define mock.On call
//   - ctx context.Context
//   - imageDigest string
func (_e *Access_Expecter) IsImageDigestUsed(ctx interface{}, imageDigest interface{}) *Access_IsImageDigestUsed_Call {
	return &Access_IsImageDigestUsed_Call{Call: _e.mock.On("IsImageDigestUsed", ctx, imageDigest)}
}

func (_c *Access_IsImageDigestUsed_Call) Run(run func(ctx context.Context, imageDigest string)) *Access_IsImageDigestUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Access_IsImageDigestUsed_Call) Return(_a0 bool, _a1 error) *Access_IsImageDigestUsed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Setup provides a mock function with given fields: ctx, path
func (_m *Access) Setup(ctx context.Context, path string) error {
	ret := _m.Called(ctx, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Access_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type Access_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *Access_Expecter) Setup(ctx interface{}, path interface{}) *Access_Setup_Call {
	return &Access_Setup_Call{Call: _e.mock.On("Setup", ctx, path)}
}

func (_c *Access_Setup_Call) Run(run func(ctx context.Context, path string)) *Access_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Access_Setup_Call) Return(_a0 error) *Access_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateDynakube provides a mock function with given fields: ctx, dynakube
func (_m *Access) UpdateDynakube(ctx context.Context, dynakube *metadata.Dynakube) error {
	ret := _m.Called(ctx, dynakube)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metadata.Dynakube) error); ok {
		r0 = rf(ctx, dynakube)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Access_UpdateDynakube_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDynakube'
type Access_UpdateDynakube_Call struct {
	*mock.Call
}

// UpdateDynakube is a helper method to define mock.On call
//   - ctx context.Context
//   - dynakube *metadata.Dynakube
func (_e *Access_Expecter) UpdateDynakube(ctx interface{}, dynakube interface{}) *Access_UpdateDynakube_Call {
	return &Access_UpdateDynakube_Call{Call: _e.mock.On("UpdateDynakube", ctx, dynakube)}
}

func (_c *Access_UpdateDynakube_Call) Run(run func(ctx context.Context, dynakube *metadata.Dynakube)) *Access_UpdateDynakube_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metadata.Dynakube))
	})
	return _c
}

func (_c *Access_UpdateDynakube_Call) Return(_a0 error) *Access_UpdateDynakube_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateOsAgentVolume provides a mock function with given fields: ctx, volume
func (_m *Access) UpdateOsAgentVolume(ctx context.Context, volume *metadata.OsAgentVolume) error {
	ret := _m.Called(ctx, volume)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metadata.OsAgentVolume) error); ok {
		r0 = rf(ctx, volume)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Access_UpdateOsAgentVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOsAgentVolume'
type Access_UpdateOsAgentVolume_Call struct {
	*mock.Call
}

// UpdateOsAgentVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - volume *metadata.OsAgentVolume
func (_e *Access_Expecter) UpdateOsAgentVolume(ctx interface{}, volume interface{}) *Access_UpdateOsAgentVolume_Call {
	return &Access_UpdateOsAgentVolume_Call{Call: _e.mock.On("UpdateOsAgentVolume", ctx, volume)}
}

func (_c *Access_UpdateOsAgentVolume_Call) Run(run func(ctx context.Context, volume *metadata.OsAgentVolume)) *Access_UpdateOsAgentVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metadata.OsAgentVolume))
	})
	return _c
}

func (_c *Access_UpdateOsAgentVolume_Call) Return(_a0 error) *Access_UpdateOsAgentVolume_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewAccess interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccess creates a new instance of Access. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccess(t mockConstructorTestingTNewAccess) *Access {
	mock := &Access{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
